In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    TreeNode parent1, parent2;
    int level1, level2;
    public bool IsCousins(TreeNode root, int x, int y) {
        if (root == null || root.val == x || root.val == y) return false;
        Find(root.left, root, 0, x, y);
        Find(root.right, root, 0, x, y);
        return (level1 == level2) && (parent1 != parent2);
    }
    public void Find(TreeNode root, TreeNode parent, int level, int x, int y){
        if (root == null)   return;
        if (root.val == x)  { parent1 = parent;     level1 = level; }
        else if (root.val == y)  { parent2 = parent;     level2 = level; }
        Find(root.left, root, level + 1, x, y);
        Find(root.right, root, level + 1, x, y);
    }
}
