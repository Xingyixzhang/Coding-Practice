C# Solution with Recursion ----------------------------------------------------------

public class Solution {
    public int ClimbStairs(int n) {
        int[] result = new int[n];
        int final = 0;
/*                                     -------- OR: if (n <= 2) return n;
        switch (n){
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                break;
        }
*/                                    ---------
        result[0] = ClimbStairs(1);
        result[1] = ClimbStairs(2);
        
        if (n > 2){
            for (int i = 2; i < n; i++){
                result[i] = result[i-2] + result[i-1];
                final = result[i];
            }
        }
        
        return final;
    }
}

Python3 Solution -----------------------------------------------------------------------

class Solution:
    def climbStairs(self, n: int) -> int:
        i=1
        j=1
        while n >= 1 :
            temp=j
            j += i
            i = temp
            n=n-1
        return i 

Change in Question: Min Cost Climbing Stairs. ------------- CLASSIC ------------------------

C# Solution --------------------------------------------------------------------------------

public class Solution {
    public int MinCostClimbingStairs(int[] cost) {
        int cost1 = cost[0];
        int cost2 = cost[1];
        int result = 0;
        
        for (int i = 2; i < cost.Length; i++){
            result = Math.Min(cost1, cost2) + cost[i];
            cost1 = cost2;
            cost2 = result;
        }
        
        result = Math.Min(cost1, cost2);
        
        return result;
    }
}

Python3 Solution --------------------- Dynamic Programming ----------------------------------

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        length = len(cost)
        
        if length == 0:
            return 0
        elif length <= 2:
            return min(cost)
        
        result = [cost[0], cost[1]]
        
        for i in range (2, length):
            result.append(min(result[i-1], result[i-2]) + cost[i])
            
        return min(result[-1], result[-2])
