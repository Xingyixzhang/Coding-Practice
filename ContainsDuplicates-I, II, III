I --

public class Solution {
    public bool ContainsDuplicate(int[] nums) {
        var temp = new HashSet<int>();
        for (int i = 0; i < nums.Length; i++){
            if (!temp.Add(nums[i]))  return true;
        }
        return false;
    }
}

II --

public class Solution {
    public bool ContainsNearbyDuplicate(int[] nums, int k) {
        if (nums.Length <= 1)   return false;
        var sets = new HashSet<int>();
        for (int i = 0; i < nums.Length; i++){
            if (!sets.Add(nums[i])) return true;
            if (sets.Count() > k)   sets.Remove(nums[i-k]);
        }
        return false;
    }
}

III --
/*
    Given an array of integers, find out whether there are two distinct indices i and j in the array,
    such that the absolute difference between nums[i] and nums[j] is at most t and the absolute 
    difference between i and j is at most k.
*/

public class Solution {
    public bool ContainsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums.Length <= 1 || k < 1 || t < 0) return false;
        var ss = new SortedSet<long>();
        for (int i = 0; i < nums.Length; i++) {
            if (ss.GetViewBetween((long)nums[i] - t, (long)nums[i] + t).Count > 0) return true;
            ss.Add(nums[i]);
            if (i >= k) ss.Remove(nums[i - k]);
        }
        return false;
    }
}
