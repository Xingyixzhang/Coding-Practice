// Look for the two indices in an unsorted array. --------------------------------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int length = nums.Length;
        for (int i = 0; i<length; i++)
        {
            for (int j=i+1; j<length; j++)
            {
                int sum = nums[i]+nums[j];
                if (sum == target){
                    return new int[]{i,j};
                }      
            }
        }
        return new int [] {0,0};
    }
}

// Two Pointers (Only if the given array is sorted) -- O(n) --------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
    
        if (numbers.Length <= 1)    return new int[0];
        
        int i = 0;
        int j = numbers.Length-1;
        
        while (i < j) 
        {
            if (numbers[i] + numbers[j] > target)   j--;
            if (numbers[i] + numbers[j] < target)  i++;
            if (numbers[i] + numbers[j] == target)    return new int[]{i, j};
        }
        
        return new int[0];
    }
}

// Final solution -- fast for both sorted and unsorted ---------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
        Dictionary<int, int> visited = new Dictionary<int, int>();
        int compli;
        for (int i = 0; i < numbers.Length; i ++){
            compli = target - numbers[i];
            if (visited.ContainsKey(compli))   return new int[]{visited[compli], i};
            visited.TryAdd(numbers[i], i);
        }
        return new int[0];
    }
}
