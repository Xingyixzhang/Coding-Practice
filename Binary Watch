A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.
For example, the above binary watch reads "3:25".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:

Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

public class Solution {
    public IList<string> ReadBinaryWatch(int num)
        {
            var result = new List<string>();
            var hourNumbers   = new int[] { 8,   4, 2, 1 };
            var minuteNumbers = new int[] { 32, 16, 8, 4, 2, 1 };

            for (int i = 0; i <= num; i++){
                var listHours   = generateDigits(hourNumbers, i);
                var listMinutes = generateDigits(minuteNumbers, num - i);
                foreach (var hours in listHours){
                    if (hours >= 12)    continue; 
                    foreach (var minutes in listMinutes){
                        if (minutes >= 60)      continue; 
                        var minuteTwoDigits = minutes.ToString();
                        var minutesText = minutes < 10 ? "0" + minuteTwoDigits : minuteTwoDigits;
                        result.Add(hours + ":" + minutesText); 
                    }
                }
            }
            return result; 
        }
        private static List<int> generateDigits(int[] numbers, int count){
            var result = new List<int>();
            generateDigitsBySteps(numbers, count, 0, 0, result);
            return result; 
        }
        private static void generateDigitsBySteps(int[] numbers, int count, int start, int sum, List<int> result){
            if (count == 0)     result.Add(sum); 
            for (int i = start; i < numbers.Length; i++)
                generateDigitsBySteps(numbers, count - 1, i + 1, sum + numbers[i], result); 
        }    
}
