Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2:
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int maxLevel = 0, res = 0; // public or not both would work.
    public int FindBottomLeftValue(TreeNode root) {
        Preorder(root, 1);
        return res;
    }
    public void Preorder(TreeNode root, int currLevel){
        if (root == null)   return;
        if (currLevel > maxLevel)  {
            maxLevel = currLevel;
            res = root.val;
        }
        if (root.left != null)  Preorder(root.left, currLevel + 1);
        if (root.right != null) Preorder(root.right, currLevel + 1);
    }
}

Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);
        TreeNode curr = null;
        
        while(queue.Count > 0)
        {
            curr = queue.Dequeue();
			
            // iterate from right to left at each level
            if(curr.right != null)
                queue.Enqueue(curr.right);
            if(curr.left != null)
                queue.Enqueue(curr.left);
        }
        
        return curr.val;
