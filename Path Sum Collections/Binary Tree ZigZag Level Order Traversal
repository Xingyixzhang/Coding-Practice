Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {
        var res = new List<IList<int>>();
        if (root == null)   return res;
        int depth = 0;
        var q = new Queue<TreeNode>();
        q.Enqueue(root);
        while (q.Any()){
            int size = q.Count;
            var newSet = new List<int>();
            for (int i = 0; i < size; i++){
                TreeNode curr = q.Dequeue();
                if (depth % 2 == 0) newSet.Add(curr.val);
                else    newSet.Insert(0, curr.val);
                if (curr.left != null)  q.Enqueue(curr.left);
                if (curr.right != null) q.Enqueue(curr.right);
            }
            depth++;
            res.Add(newSet);
        }
        return res;
    }
}
