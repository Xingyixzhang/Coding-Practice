/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> PreorderTraversal(TreeNode root) {
        var res = new List<int>();
        Helper(root, res);
        return res;
    }
    public void Helper(TreeNode node, List<int> res){
        if (node == null)   return;
        res.Add(node.val);
        Helper(node.left, res);
        Helper(node.right, res);
    }
}

Iteratively ---------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> PreorderTraversal(TreeNode root) {
        var res = new List<int>();
        if (root == null)   return res;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.Push(root);
        while (stack.Count != 0){
            TreeNode pop = stack.Pop();
            res.Add(pop.val);
            if (pop.right != null)  stack.Push(pop.right);
            if (pop.left != null)   stack.Push(pop.left);
        }
        return res;
    }
}
