/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
--------------------------------RECURSIVE; CHILDREN -------------------------------

public class Solution {
    public int MaxDepth(Node root) {
        if (root == null)   return 0;
        else{
            int res = 1;
            foreach (Node node in root.children){
                res = Math.Max(res, MaxDepth(node)+1);
            }
            return res;
        }
    }
}

-----------------------------ITERATIVE QUEUE ------FASTER SLIGHTLY ----------------

/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public int MaxDepth(Node root) {
        if (root == null)   return 0;
        int res = 0;
        var q = new Queue<Node>();
        q.Enqueue(root);
        
        while (q.Count != 0){
            ++res;
            var size = q.Count;
            for (int i = 0; i < size; i++){
                Node node = q.Dequeue();
                for (int j = 0; j < node.children.Count; j++){
                    q.Enqueue(node.children[j]);
                }
            }
        }return res;
    }
}
