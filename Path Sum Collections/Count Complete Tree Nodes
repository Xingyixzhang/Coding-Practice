Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int CountNodes(TreeNode root) {
        int left = GetLeftDepth(root);
        int right = GetRightDepth(root);
        if (left == right)  return (int)Math.Pow(2, left) - 1;
        return CountNodes(root.left) + CountNodes(root.right) + 1;
    }
    private int GetLeftDepth(TreeNode root){
        if (root == null)   return 0;
        return GetLeftDepth(root.left) + 1;
    }
    private int GetRightDepth(TreeNode root){
        if (root == null)   return 0;
        return GetRightDepth(root.right) + 1;
    }
}
