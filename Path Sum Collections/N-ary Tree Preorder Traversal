/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
-------------------------------------------SLOW but SUPER EFFICIENT ON SPACE--------------------------

public class Solution {
    public IList<int> Preorder(Node root) {
        if (root == null)   return new List<int>();
        var res = new List<int> {root.val};
        return root.children == null? res: res.Concat(root.children.SelectMany(Preorder)).ToList();
    }
}
--------------------------------------------ITERATIVE STACK SLIGHTLY FASTER SAME SPACE EFFICIENCY---------------------------
/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public IList<int> Preorder(Node root) {
        var res = new List<int>();
        if (root == null)   return res;
        var stack = new Stack<Node>();
        stack.Push(root);
        while (stack.Count > 0){
            Node node = stack.Pop();
            res.Add(node.val);
            var childs = node.children?.Count() ?? 0;
            for (int i = childs - 1; i >= 0; i--)
                stack.Push(node.children[i]);
        }
        return res;
    }
}
