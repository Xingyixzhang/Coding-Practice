You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int result = 0;
    public int PathSum(TreeNode root, int sum) {
        DFS(new List<int>(), root, sum);
        return this.result;
    }
    private void DFS(List<int> preSum, TreeNode root, int target){
        if (root == null)   return;
        var currSum = new List<int>();
        currSum.Add(root.val);
        foreach (var item in preSum)
            currSum.Add(item + root.val);
        foreach (var item in currSum)
            if (item == target) this.result++;
        DFS(currSum, root.right, target);
        DFS(currSum, root.left, target);
    }
}
