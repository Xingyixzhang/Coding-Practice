Level 1 -- Top Down

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode root) {
        var res = new List<IList<int>>();
        if (root == null)   return res;
        Queue<TreeNode> myQ = new Queue<TreeNode>();
        myQ.Enqueue(root);
        while (myQ.Count > 0){
            var list = new List<int>();
            int size = myQ.Count();
            for (int i = 0; i < size; i++){
                TreeNode node = myQ.Dequeue();
                list.Add(node.val);
                if (node.left != null)  myQ.Enqueue(node.left);
                if (node.right != null) myQ.Enqueue(node.right);
            }
            res.Add(list);
        }
        return res;
    }
}

Level 2 -- Bottom Up

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrderBottom(TreeNode root) {
        var res = new List<IList<int>>();
        if (root == null)   return res;
        var myQ = new Queue<TreeNode>();
        myQ.Enqueue(root);
        while (myQ.Count > 0){
            int size = myQ.Count;
            var list = new List<int>();
            for (int i = 0; i < size; i++){
                TreeNode node = myQ.Dequeue();
                list.Add(node.val);
                if (node.left != null)  myQ.Enqueue(node.left);
                if (node.right != null) myQ.Enqueue(node.right);
            }
            res.Add(list);
        }
        res.Reverse();
        return res;
    }
}
