We are given a matrix with R rows and C columns has cells with integer coordinates (r, c), where 0 <= r < R and 0 <= c < C.

Additionally, we are given a cell in that matrix with coordinates (r0, c0).

Return the coordinates of all cells in the matrix, sorted by their distance from (r0, c0) from smallest distance to largest distance.  Here, the distance between two cells (r1, c1) and (r2, c2) is the Manhattan distance, |r1 - r2| + |c1 - c2|.  
(You may return the answer in any order that satisfies this condition.)
Example 1:

Input: R = 1, C = 2, r0 = 0, c0 = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (r0, c0) to other cells are: [0,1]
Example 2:

Input: R = 2, C = 2, r0 = 0, c0 = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.
Example 3:

Input: R = 2, C = 3, r0 = 1, c0 = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
 

Note:

1 <= R <= 100
1 <= C <= 100
0 <= r0 < R
0 <= c0 < C

We can fill up the result array without any pre-processing as suggested by other posts like using a dictionary or queue, etc.
By no means I am suggesting there are any issues with those. But none can beat a simple array procssing using some simple math.
Looking into the following image, it should clear up how this algorithm works.
For R = 2, C = 3, and r0 = 1, c0 = 2 this is how all cells would be arranged.

The way this code works is to fill the result array starting at r0, c0 and go around it 1 level at the time to fill the entire array.
This way we won't need any pre-preocessing but sure we can do some optimization.
The way that I optimized it is to cap row processing. This can be optimized farther but for a simple level solution I think this is enough.

public class Solution {
    public int[][] AllCellsDistOrder(int R, int C, int r0, int c0) {
        int RR = R - 1, CC = C - 1;
        // find max distance to all 4 corners of the matrix
        var maxd = Math.Max(Math.Max(r0 + c0, RR - r0 + c0), Math.Max(RR - r0 + CC - c0, r0 + CC - c0));

        var res = new int[R * C][];
        var index = 0;
        res[index++] = new[] { r0, c0, };

        for (var i = 1; i <= maxd; i++)
        {
			// calculate row top and bottom caps (optimization)
            var rt = Math.Max(0, r0 - i);
            var rb = Math.Min(RR, r0 + i);

            for (int r = rt; r <= rb; r++)
            {
				// calculate current distance to center
                var d = Math.Abs(r0 - r);
				// base on that we calculate column value for the cell to the left
                var ci = i - d;
                var c = c0 - ci;

				// if this is a valid point then insert it
                if (c >= 0)
                {
                    res[index++] = new[] { r, c, };
                }

				// if we are not processing the top point (center) then find the right point"
                if (ci > 0)
                {
                    c = c0 + ci;

					// if this is a valid point then insert it
                    if (c < C)
                    {
                        res[index++] = new[] { r, c, };
                    }
                }
            }
        }
        
        return res;
    }
}
