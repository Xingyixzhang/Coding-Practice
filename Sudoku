*** Valid Sudoku ------- HashSet<string> ---------

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        var seen = new HashSet<string>();
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (board[i][j] != '.')
                    if (!seen.Add(board[i][j] + " found in row " + i) ||
                        !seen.Add(board[i][j] + " found in col " + j) ||
                        !seen.Add(board[i][j] + " found in block " + i/3 + "-" + j/3))
                        return false;
            }
        }
        return true;
    }
}

<BETTER>
-- OR -- 
<LESS GOOD THOUGH LESS RUNTIME>

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        for(int i = 0; i<9; i++){
            var rows = new HashSet<char>();
            var columns = new HashSet<char>();
            var cube = new HashSet<char>();
            for (int j = 0; j < 9;j++){
                if(board[i][j]!='.' && !rows.Add(board[i][j]))  return false;
                if(board[j][i]!='.' && !columns.Add(board[j][i]))   return false;
                int RowIndex = 3*(i/3);
                int ColIndex = 3*(i%3);
                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.Add(board[RowIndex + j/3][ColIndex + j%3]))
                    return false;
            }
        }
        return true;
    }
}

*** Solve Sudoku using backTracking and recursion.

public class Solution {
    public void SolveSudoku(char[][] board) {
        if (board == null || board.Length != 9 || board[0].Length != 9) return;
        bool tmp = SudokuHelper(board, 0, 0);
    }
    
    public bool SudokuHelper(char[][] board, int row, int col){
        if (board == null || board.Length != 9) return false;
        while (row < 9 && col < 9){
            if (board[row][col] == '.') break;
            if (col == 8)   {col = 0;    row++;}
            else    col++;
        }
        
        if (row >= 9)   return true;
        int newRow = row + col/8;
        int newCol = (col + 1)%9;
        for (int num = 1; num <= 9; num++){
            if (isValid(board, row, col, num)){
                board[row][col] = Convert.ToChar(num + '0');
                bool result = SudokuHelper(board, newRow, newCol);
                if (result) return true;
                board[row][col] = '.';  // BackTracking.
            }
        }
        return false;
    }
    
    public bool isValid(char[][] board, int row, int col, int num){
        for (int i = 0; i < 9; i++){    // Check row and col.
            if (board[row][i] == num + '0' || board[i][col] == num + '0')    return false;
        }
        // Check Square
        int rowoff = (row/3)*3;
        int coloff = (col/3)*3;
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < 3; j++){
                if (board[rowoff + i][coloff + j] == num + '0') return false;
            }
        }
        return true;
    }
}
