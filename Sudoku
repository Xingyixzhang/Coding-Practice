*** Valid Sudoku ------- HashSet<string> ---------

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        var seen = new HashSet<string>();
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (board[i][j] != '.')
                    if (!seen.Add(board[i][j] + " found in row " + i) ||
                        !seen.Add(board[i][j] + " found in col " + j) ||
                        !seen.Add(board[i][j] + " found in block " + i/3 + "-" + j/3))
                        return false;
            }
        }
        return true;
    }
}

<BETTER>
-- OR -- 
<LESS GOOD THOUGH LESS RUNTIME>

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        for(int i = 0; i<9; i++){
            var rows = new HashSet<char>();
            var columns = new HashSet<char>();
            var cube = new HashSet<char>();
            for (int j = 0; j < 9;j++){
                if(board[i][j]!='.' && !rows.Add(board[i][j]))  return false;
                if(board[j][i]!='.' && !columns.Add(board[j][i]))   return false;
                int RowIndex = 3*(i/3);
                int ColIndex = 3*(i%3);
                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.Add(board[RowIndex + j/3][ColIndex + j%3]))
                    return false;
            }
        }
        return true;
    }
}
