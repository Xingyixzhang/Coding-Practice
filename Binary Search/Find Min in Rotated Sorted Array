Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

public class Solution {
    public int FindMin(int[] nums) {
        if (nums.Length == 1)   return nums[0];
        int left = 0, right = nums.Length - 1;
        if (nums[left] < nums[right])   return nums[0];
        while (left <= right){
            int mid = left + (right - left)/2;
            if (nums[mid] > nums[mid + 1])  return nums[mid + 1];
            if (nums[mid] < nums[mid - 1])  return nums[mid];
            if (nums[mid] > nums[0])    left = mid + 1;
            else    right = mid - 1;
        }
        return -1;
    }
}

--------------------------------Interesting, Faster ---------------------------

public class Solution {
    public int FindMin(int[] nums) {
        Array.Sort(nums);
        return nums[0];
    }
}
