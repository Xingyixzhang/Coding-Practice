Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

public class Solution {
    public int Search(int[] nums, int target) {
        for(int i = nums.Length - 1; i >= 0; i--)
        {
            if(nums[i] == target)   return i;
            else if(nums[i] < target)   break;
        }
        for(int i = 0; i<nums.Length; i++)
        {
            if(nums[i] == target)   return i;
            else if(nums[i] > target)   break;
        }
        return -1;
    }
}

OR ====================================================

public class Solution {
    public int Search(int[] nums, int target) {
        if (nums.Length == 0)   return -1;
        if (nums.Length == 1)   return nums[0] == target? 0: -1;
        int left = 0, right = nums.Length - 1;
        for (int i = 0; i < nums.Length-1; i++){
            if (nums[i] == target)  return i;
            if (nums[i] > nums[i+1])    { left = i+1; break; }
        }
        while (left <= right){
            int mid = left + (right - left)/2;
            if (nums[mid] == target)    return mid;
            else if (nums[mid] > target)    right = mid - 1;
            else    left = mid + 1;
        }
        return -1;
    }
}
