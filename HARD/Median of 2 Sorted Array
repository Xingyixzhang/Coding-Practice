There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        int a = nums1.Length, b = nums2.Length;
        if (a > b){
            int[] temp = nums1; nums1 = nums2; nums2 = temp;
            int tmp = a; a = b; b = tmp;
        }
        int min = 0, max = a, half = (a + b + 1)/2;
        while (min <= max){
            int i = (min + max) / 2;
            int j = half - i;
            if (i < max && nums2[j - 1] > nums1[i]) min = i + 1;
            else if (i > min && nums1[i-1] > nums2[j])  max = i - 1;
            else {
                int maxLeft = 0;
                if (i == 0) maxLeft = nums2[j-1];
                else if (j == 0)    maxLeft = nums1[i-1];
                else    maxLeft = Math.Max(nums1[i-1], nums2[j-1]);
                if ((a+b)%2 == 1)   return maxLeft;
                int minRight = 0;
                if (i == a) minRight = nums2[j];
                else if (j == b)    minRight = nums1[i];
                else    minRight = Math.Min(nums2[j], nums1[i]);
                return (maxLeft + minRight)/2.0;
            }
        }
        return 0.0;
    }
}
