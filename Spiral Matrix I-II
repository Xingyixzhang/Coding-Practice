// I -- 
/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
Example 1:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
*/

// Simulation --

public class Solution {
    public IList<int> SpiralOrder(int[][] matrix) {
        if (matrix[0].Length <= 1) return matrix[0];
        var result = new List<int>();
        int m = 0, n = 0, di = 0;
        int M = matrix.Length, N = matrix[0].Length;
        bool[][] seen = new bool[M][];
        int[] dm = {0,1,0,-1};
        int[] dn = {1,0,-1,0};
        
        for (int i = 0; i < M * N; i++){
            result.Add(matrix[m][n]);
            seen[m][n] = true;              // DID NOT WORK, FIND OUT WHYYYYYYYY.
            int x = m + dm[di];
            int y = n + dn[di];
            if (x >= 0 && x < M && y >= 0 && y < N && !seen[x][y])
                { m = x;    n = y; }
            else { di = (di + 1) % 4;    m += dm[di];    n += dn[di]; }
        }
            
        return result;
    }
}

OR ====================================================================

/*
 * Algorithm: 
 * 1. Use direction array to encapsulate four direction using two arrays. Go right, go down, go left and go up are four direction to form one spiral;
 * 2. Set start point as outside the matrix first row left to the first element in the matrix;
 * 3. Design a while loop to make sure all elements in matrix will be iterated;
 * 4. Design a conditional statement to determine if the change of direction is needed.
 * 5. Change of direction can be expressed in (direction + 1) % 4;
 * 6. Add the element to the list, mark visit
 * 7. Prepare for next iteration, set startRow, startCol two variables.
*/

public class Solution {
    public IList<int> SpiralOrder(int[][] matrix) {
        if (matrix == null || matrix.Length == 0 || matrix[0].Length == 0)   
            return new List<int>();
        int rows = matrix.Length, columns = matrix[0].Length;
        
        // right, down, left, up
        var directionX = new int[]{0, 1, 0, -1};
        var directionY = new int[]{1, 0, -1, 0};
        
        var visited = new bool[rows, columns];
        
        var direction = 0; 
        var startRow = 0; 
        var startCol = -1; 
        
        var list = new List<int>(); 
        
        int index = 0; 
        while(index < rows * columns)
        {
            var nextRow = startRow + directionX[direction];
            var nextCol = startCol + directionY[direction];
            
            if(nextRow < 0 || nextRow >= rows || nextCol < 0 || nextCol >= columns || visited[nextRow, nextCol])
            {
                direction = (direction + 1) % 4; 
                continue; 
            }
            
            list.Add(matrix[nextRow][nextCol]);
            visited[nextRow, nextCol] = true; 
            
            startRow = nextRow;
            startCol = nextCol;
            
            index++; 
        }
        
        return list; 
    }
}
// II ---------------------------------------------------------------------------------------
Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

Example:

Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

public class Solution {
    public int[][] GenerateMatrix(int n) {
        int num = 1;
        int[][] res = new int[n][];
        int rowstart = 0, rowend = n-1, colstart = 0, colend = n-1;
        for (int i=0; i<n; i++)     res[i] = new int[n];
        
        while (rowstart <= rowend && colstart <= colend){
            for (int i = colstart; i <= colend; i++)        res[rowstart][i] = num++;
            for (int i = rowstart+1; i <= rowend; i++)      res[i][colend] = num++;
            if (rowstart != rowend)
                for (int i = colend-1; i >=colstart; i--)   res[rowend][i] = num++;
            if (colstart != colend)
                for (int i = rowend-1; i > rowstart; i--)   res[i][colstart] = num++;
            rowstart++;     colstart++;
            rowend--;       colend--;
        }
        return res;
    }
}
