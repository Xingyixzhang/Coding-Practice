// Look for the two indices in an unsorted array. --------------------------------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int length = nums.Length;
        for (int i = 0; i<length; i++)
        {
            for (int j=i+1; j<length; j++)
            {
                int sum = nums[i]+nums[j];
                if (sum == target){
                    return new int[]{i,j};
                }      
            }
        }
        return new int [] {0,0};
    }
}

// Two Pointers (Only if the given array is sorted) -- O(n) --------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
    
        if (numbers.Length <= 1)    return new int[0];
        
        int i = 0;
        int j = numbers.Length-1;
        
        while (i < j) 
        {
            if (numbers[i] + numbers[j] > target)   j--;
            if (numbers[i] + numbers[j] < target)  i++;
            if (numbers[i] + numbers[j] == target)    return new int[]{i, j};
        }
        
        return new int[0];
    }
}

// Final solution -- fast for both sorted and unsorted ---------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
        Dictionary<int, int> visited = new Dictionary<int, int>();
        int compli;
        for (int i = 0; i < numbers.Length; i ++){
            compli = target - numbers[i];
            if (visited.ContainsKey(compli))   return new int[]{visited[compli], i};
            visited.TryAdd(numbers[i], i);
        }
        return new int[0];
    }
}

// *** 3Sum -- 
/*
 * Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
 * Note:
 * The solution set must not contain duplicate triplets.
 * Example:
 * Given array nums = [-1, 0, 1, 2, -1, -4],
 * A solution set is:[[-1, 0, 1], [-1, -1, 2]]
 */

public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        Array.Sort(nums);
        List<IList<int>> result = new List<IList<int>>();
        for (int i = 0; i < nums.Length - 2; i++)
        {
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(int j = i + 1, k = nums.Length - 1; j < k; )
            {
                if(nums[j] + nums[k] > -nums[i]) k--;
                else if (nums[j] + nums[k] < -nums[i]) j++;
                else
                {
                    List<int> triplet = new List<int>();
                    triplet.Add(nums[i]);
                    triplet.Add(nums[j]);
                    triplet.Add(nums[k]);
                    result.Add(triplet);
                    while (++j < nums.Length && nums[j] == nums[j - 1]);
                    while (--k > i && nums[k] == nums[k + 1]) ;
                }
            }
        }
        return result;
    }
}
