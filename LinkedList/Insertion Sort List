Algorithm of Insertion Sort:

Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.
It repeats until no input elements remain.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode InsertionSortList(ListNode head) {
        ListNode newHead = null, curr = head;
        while (curr != null){
            ListNode next = curr.next;  // in case the effect of curr changes during Insert function.
            newHead = Insert(newHead, curr);
            curr = next;
        }
        return newHead;
    }
    public ListNode Insert(ListNode head, ListNode node){
        ListNode prev = null, curr = head;
        while (curr != null && curr.val < node.val){
            prev = curr;    curr = curr.next;
        }
        if (prev != null){
            prev.next = node;   node.next = curr;   return head;
        }
        else{
            node.next = head;   return node;
        }
    }
}
