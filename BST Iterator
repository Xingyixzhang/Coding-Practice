Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Example:
BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
 
Note:

next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class BSTIterator {
    Stack<TreeNode> stack;
    
    private void leftMostInorder(TreeNode root){
        while (root != null){
            this.stack.Push(root);
            root = root.left;
        }
    }
    
    public BSTIterator(TreeNode root) {
        this.stack = new Stack<TreeNode>();
        this.leftMostInorder(root);
    }
    
    /** @return the next smallest number */
    public int Next() {
        TreeNode topmost = this.stack.Pop();
        // call the helper function for the right child to maintain the invariant.
        if (topmost.right != null)  this.leftMostInorder(topmost.right);
        return topmost.val;
    }
    
    /** @return whether we have a next smallest number */
    public bool HasNext() {
        return this.stack.Count() > 0;
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.Next();
 * bool param_2 = obj.HasNext();
 */
