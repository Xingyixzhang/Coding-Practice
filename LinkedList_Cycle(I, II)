96ms -- slow and fast -----------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public bool HasCycle(ListNode head) {
        if (head == null || head.next == null)  return false;
        ListNode slow = head, fast = head.next;
        while (slow != fast){
            if (fast == null || fast.next == null)  return false;
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}

92ms -- HashSet -----------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public bool HasCycle(ListNode head) {
        var seen = new HashSet<ListNode>();
        while (head != null){
            if (seen.Contains(head))    return true;
            else    seen.Add(head);
            head = head.next;
        }
        return false;
    }
}

2 x 48ms Python3 same with the fast-slow two pointer method -----------------------------------------

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:   return False
        slow, fast = head, head.next
        while slow != fast:
            if not fast or not fast.next:   return False
            slow, fast = slow.next, fast.next.next
        return True
        
 class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        while (head):
            if head.next is None:    break
            if head.val is None:    return True
            head.val = None
            head = head.next
        return False

44ms Python3, fast-slow method but simpler --------------------------------------------

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:    return True
        return False

LinkedList Cycle II: Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

96ms -- Two pointers ------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        if (head == null || head.next == null)  return null;
        ListNode slow = head, fast = head;
        slow = slow.next;
        fast = fast.next.next;
        while (fast != null && fast.next != null){
            if (slow == fast)  break;
            fast = fast.next.next;
            slow = slow.next;
        }
        if (slow == fast){
            slow = head;
            while (slow != fast){
                slow = slow.next;
                fast = fast.next;
            }
            return slow;
        }
        return null;
    }
}

96ms -- HashSet ------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        var myHash = new HashSet<ListNode>();
        while (head != null){
            if (!myHash.Add(head))  return head;
            head = head.next;
        }
        return null;
    }
}

44ms -- Python3 Two pointers solution --------------

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        if not head or not head.next:   return None
        slow, fast = head.next, head.next.next
        while fast and fast.next:
            if slow == fast:    break;
            fast = fast.next.next
            slow = slow.next
        if slow == fast:
            slow = head
            while slow != fast:
                slow = slow.next
                fast = fast.next
            return slow
        return None
