Given the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private int max = 0;
    public TreeNode BstToGst(TreeNode root) {
        if (root == null)   return null;
        TreeNode right = BstToGst(root.right),
                 gst = new TreeNode(root.val + max);
        if (gst.val > max)  max = gst.val;
        TreeNode left = BstToGst(root.left);
        gst.left = left;
        gst.right = right;
        return gst;
    }
}
