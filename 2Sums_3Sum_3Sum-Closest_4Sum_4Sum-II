// Look for the two indices in an unsorted array. --------------------------------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int length = nums.Length;
        for (int i = 0; i<length; i++)
        {
            for (int j=i+1; j<length; j++)
            {
                int sum = nums[i]+nums[j];
                if (sum == target){
                    return new int[]{i,j};
                }      
            }
        }
        return new int [] {0,0};
    }
}

// Two Pointers (Only if the given array is sorted) -- O(n) --------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
    
        if (numbers.Length <= 1)    return new int[0];
        
        int i = 0;
        int j = numbers.Length-1;
        
        while (i < j) 
        {
            if (numbers[i] + numbers[j] > target)   j--;
            if (numbers[i] + numbers[j] < target)  i++;
            if (numbers[i] + numbers[j] == target)    return new int[]{i, j};
        }
        
        return new int[0];
    }
}

// Final solution -- fast for both sorted and unsorted ---------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
        Dictionary<int, int> visited = new Dictionary<int, int>();
        int compli;
        for (int i = 0; i < numbers.Length; i ++){
            compli = target - numbers[i];
            if (visited.ContainsKey(compli))   return new int[]{visited[compli], i};
            visited.TryAdd(numbers[i], i);
        }
        return new int[0];
    }
}

// *** 3Sum -- Two Pointers
/*
 * Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
 * Note:
 * The solution set must not contain duplicate triplets.
 * Example:
 * Given array nums = [-1, 0, 1, 2, -1, -4],
 * A solution set is:[[-1, 0, 1], [-1, -1, 2]]
 */

public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        Array.Sort(nums);
        List<IList<int>> result = new List<IList<int>>();
        for (int i = 0; i < nums.Length - 2; i++)
        {
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(int j = i + 1, k = nums.Length - 1; j < k; )
            {
                if(nums[j] + nums[k] > -nums[i]) k--;
                else if (nums[j] + nums[k] < -nums[i]) j++;
                else
                {
                    List<int> triplet = new List<int>();
                    triplet.Add(nums[i]);
                    triplet.Add(nums[j]);
                    triplet.Add(nums[k]);
                    result.Add(triplet);
                    while (++j < nums.Length && nums[j] == nums[j - 1]);
                    while (--k > i && nums[k] == nums[k + 1]) ;
                }
            }
        }
        return result;
    }
}

// *** 3Sum-Closet -- Two Pointers 
/*
 * Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. 
 * Return the sum of the three integers. You may assume that each input would have exactly one solution.
 * Example:
 * Given array nums = [-1, 2, 1, -4], and target = 1.
 * The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 */
 
public class Solution {
    public int ThreeSumClosest(int[] nums, int target) {
        
        if (nums.Length < 3)    return 0;
        Array.Sort(nums);
        int result = nums[0] + nums[1] + nums[2];
        
        for (int i = 0; i < nums.Length - 2; i++){
            
            int left = i + 1;
            int right = nums.Length-1;
            
            while (left < right){
                
                int sum = nums[i] + nums[left] + nums[right];
                
                if (sum < target)           left++;
                else if (sum > target)      right --;
                else                        return sum;
                
                if (Math.Abs(result - target) 
                    > Math.Abs(sum - target))   result = sum;
            }
        }
        
        return result;
    }
}

// *** 4Sum -- Two Pointers 
/*
 * Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such 
 * that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
 * Note: The solution set must not contain duplicate quadruplets.
 */
 
public class Solution {
    public IList<IList<int>> FourSum(int[] nums, int target) {
    
        List<IList<int>> result = new List<IList<int>>();
        if (nums.Length < 4)    return result;
        Array.Sort(nums);
        
        for (int i = 0; i < nums.Length - 3; i ++){
            
            if (i != 0 && nums[i] == nums[i-1]) continue;
            int diff1 = nums[i] - target;
            
            for (int j = i+1; j < nums.Length - 2; j++){
                if (j != i + 1 && nums[j] == nums[j-1]) continue;
                int left = j + 1, right = nums.Length - 1;
                
                while (left < right){
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    
                    if (sum < target)       left++;
                    else if (sum > target)  right--;
                    else{
                        List<int> quad = new List<int>();
                        quad.Add(nums[i]);
                        quad.Add(nums[j]);
                        quad.Add(nums[left]);
                        quad.Add(nums[right]);
                        result.Add(quad);
                        left++;     right--;
                        
                        while (left < right && nums[left] == nums[left - 1])    left++;
                        while (left < right && nums[right] == nums[right + 1])  right--;
                    }
                }
            }
        }
        return result;
    }
}

// *** 4Sum II
/*
 * Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) 
 * there are such that A[i] + B[j] + C[k] + D[l] is zero.
 * To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. 
 * All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
 * Example:
 * Input: A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2]
 * Output: 2
 * Explanation: The two tuples are:
 * 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
 * 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
*/
 
 
public class Solution {
    public int FourSumCount(int[] A, int[] B, int[] C, int[] D) {
        // result is guaranteed to be at most 2^31 - 1 (int32 upper limit.)
        // results can have dups.
        
        int result = 0;
        var sums = new Dictionary<int, int>();
        int listLen = A.Length; // since they have the same length.
        
        for (int i = 0; i < listLen; i++){
            for (int j = 0; j < listLen; j++){
                int sum = A[i] + B[j];
                if (sums.ContainsKey(sum))  sums[sum] ++;
                else    sums[sum] = 1;
            }
        }
        
        for (int i = 0; i < listLen; i++){
            for (int j = 0; j < listLen; j++){
                int sum = -(C[i] + D[j]);
                if (sums.ContainsKey(sum))  result += sums[sum];
            }
        }
        
        return result;
    }
}
