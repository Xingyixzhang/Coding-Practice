Given a binary tree root and a linked list with head as the first node. 

Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSubPath(ListNode head, TreeNode root) {
        if (head == null)   return true;
        if (root == null)   return false;
        return Helper(head, root) || IsSubPath(head, root.left) || IsSubPath(head, root.right);
    }
    private bool Helper(ListNode head, TreeNode root){
        if (head == null)   return true;
        if (root == null)   return false;
        return head.val == root.val && (Helper(head.next, root.left) || Helper(head.next, root.right));
    }
}
