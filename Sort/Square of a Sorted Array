Given an array of integers A sorted in non-decreasing order, 
return an array of the squares of each number, also in sorted non-decreasing order.
Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

public class Solution {
    public int[] SortedSquares(int[] A) {
        int[] res = new int[A.Length];
        for (int i = 0; i < A.Length; i++)  res[i] = A[i] * A[i];
        Array.Sort(res);
        return res;
    }
}

------------------------------------------TWO POINTERS (BETTER)--------------

public class Solution {
    public int[] SortedSquares(int[] A) {
        int i = 0;
        while (i < A.Length && A[i] < 0)    i++;
        int j = i - 1;
        int[] res = new int[A.Length];
        int t = 0;
        while (j >= 0 && i < A.Length){
            if (A[j] * A[j] < A[i] * A[i]){
                res[t++] = A[j]*A[j];
                j--;
            }   else{
                res[t++] = A[i]*A[i];
                i++;
            }
        }
        while (j >= 0){
            res[t++] = A[j]*A[j];
            j--;
        }
        while (i < A.Length){
            res[t++] = A[i]*A[i];
            i++;
        }
        return res;
    }
}
