Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

public class Solution {
    public int[][] Merge(int[][] intervals) {
        var n = intervals.Length;
        if (n <= 1) return intervals;
        // var sortedIntervals = intervals.OrderBy(interval => interval[0]);
        Array.Sort(intervals, (a, b) => a[0] - b[0]);
        var res = new List<int[]>();
        res.Add(intervals.ElementAt(0));
        for (int i = 1; i < n; i++){
            var curr = intervals.ElementAt(i);
            var last = res.Last();
            if (last[1] >= curr[0]) last[1] = Math.Max(last[1], curr[1]);
            else    res.Add(curr);
        }
        return res.ToArray();
    }
}
