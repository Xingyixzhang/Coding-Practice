Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.

public class Solution {
	public string Multiply(string num1, string num2) {
	    if((num1.Length==1 && num1[0]=='0') || (num2.Length==1 && num2[0]=='0')){
			return new string('0',1);
		}
		int len1 = num1.Length, len2 = num2.Length;
		int len = len1+len2;
		int[] arr = new int[len];
		for(int i=len1-1;i>=0;i--){
			for(int j=len2-1;j>=0;j--){
				arr[i+j+1] += (num1[i]-'0') * (num2[j]-'0');
			}
		}
		int carry=0;
		StringBuilder st = new StringBuilder();
		for(int i=len-1;i>=0;i--){ 
			arr[i] += carry;
			carry = arr[i]/10;
			arr[i] = arr[i]%10;
			st.Insert(0, arr[i]);
		}
		return st.ToString().TrimStart('0');
	}
}
