Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]

public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        Array.Sort(candidates);
        var res = new List<IList<int>>();
        var curr = new List<int>();
        Helper(candidates, target, curr, 0, res);
        return res;
    }
    
    private void Helper(int[] candidates, int target, List<int> curr, int index, IList<IList<int>> res)     {
        if (target == 0)
        {
            res.Add(new List<int>(curr));
            return;
        }
        for (int i = index; i < candidates.Length && target >= candidates[i]; i++){
            curr.Add(candidates[i]);
            Helper(candidates, target - candidates[i], curr, i+1, res);
            curr.RemoveAt(curr.Count-1);
            
            while (i < candidates.Length - 1 && candidates[i+1] == candidates[i])   i++;
        }
    }
}
