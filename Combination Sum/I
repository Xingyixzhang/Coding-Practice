Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

public class Solution {
    int start = 0;
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        var res = new List<IList<int>>();
        if (target < 0) return res;
        for (int i = start; i < candidates.Length; i++){
            if (target - candidates[i] == 0)    res.Add(new List<int>{candidates[i]});
            else{
                start = i;
                foreach (var list in CombinationSum(candidates, target - candidates[i]))
                    res.Add(list.Append(candidates[i]).ToList());
            }
        }
        return res;
    }
}
