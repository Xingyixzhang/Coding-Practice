A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. For example, 321 is a Stepping Number while 421 is not.

Given two integers low and high, find and return a sorted list of all the Stepping Numbers in the range [low, high] inclusive.

Example 1:

Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

Constraints:

0 <= low <= high <= 2 * 10^9

public class Solution {
    public IList<int> CountSteppingNumbers(int low, int high) {
        var res = new List<int>();
        if (low == 0)   res.Add(0);
        for (int i = 1; i <= 9; i++){
            dfs(res, i, low, high);
        }
        res.Sort();
        return res;
    }
    public void dfs(List<int> res, int curr, int low, int high){
        if (curr >= low && curr <= high)   res.Add(curr);
        if (curr > high / 10)  return;
        int r = curr % 10;
        if (r != 9 && curr * 10 + r + 1 <= high){
            dfs(res, curr*10 + r + 1, low, high);
        }
        if (r != 0 && curr * 10 + r - 1 <= high){
            dfs(res, curr*10 + r - 1, low, high);
        }
    }
}
