C# Approach 1: Brute Force -----------------------------------------------------


public class Solution {

   public int MaxArea(int[] height) {

       int n = height.Length;

       if (n == 2) return Math.Min(height[0], height[1]);

       int area = Math.Min(height[0], height[1]);

       for (int i = 0; i < n-1; i++){

           for (int j = i+1; j < n; j++){

               area = Math.Max(area ,(j-i)*Math.Min(height[i], height[j]));

           }
       }
       return area;
   }
}

C# Approach 2: Two Pointer approach (Algorithm) ---------------------------------

int left = 0, maxArea = 0, right = height.Length - 1;

while (left < right){
  maxArea = Math.Max(maxArea, Math.Min(height[left], height[right])
            * (right - left));
  if (height[left] < height[right]) left++;
  else  right--;
}

return maxArea;
