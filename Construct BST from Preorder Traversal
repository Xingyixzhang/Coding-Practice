Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val. 
Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)
Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Note: 
1 <= preorder.length <= 100
The values of preorder are distinct.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BstFromPreorder(int[] preorder) {
        if (preorder == null)   return null;
        TreeNode root = new TreeNode(preorder[0]);
        for (int i = 1; i < preorder.Length; i++)   InsertInBST(root, preorder[i]);
        return root;
    }
    private void InsertInBST(TreeNode root, int val){
        TreeNode curr = root;
        TreeNode parent = null;
        while (curr != null){
            parent = curr;
            curr = curr.val > val? curr.left: curr.right;
        }
        if (parent.val > val)   parent.left = new TreeNode(val);
        else    parent.right = new TreeNode(val);
    }
}
